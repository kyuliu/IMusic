package com.example.imusic.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.imusic.model.AlbumInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_INFO".
*/
public class AlbumInfoDao extends AbstractDao<AlbumInfo, Long> {

    public static final String TABLENAME = "ALBUM_INFO";

    /**
     * Properties of entity AlbumInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AlbumName = new Property(1, String.class, "albumName", false, "ALBUM_NAME");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property AlbumId = new Property(3, Long.class, "albumId", false, "ALBUM_ID");
        public final static Property SongCount = new Property(4, int.class, "songCount", false, "SONG_COUNT");
        public final static Property FirstChar = new Property(5, String.class, "firstChar", false, "FIRST_CHAR");
        public final static Property SongName = new Property(6, String.class, "songName", false, "SONG_NAME");
        public final static Property Year = new Property(7, int.class, "year", false, "YEAR");
        public final static Property MSelected = new Property(8, boolean.class, "mSelected", false, "M_SELECTED");
    }


    public AlbumInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ALBUM_NAME\" TEXT," + // 1: albumName
                "\"ARTIST\" TEXT," + // 2: artist
                "\"ALBUM_ID\" INTEGER," + // 3: albumId
                "\"SONG_COUNT\" INTEGER NOT NULL ," + // 4: songCount
                "\"FIRST_CHAR\" TEXT," + // 5: firstChar
                "\"SONG_NAME\" TEXT," + // 6: songName
                "\"YEAR\" INTEGER NOT NULL ," + // 7: year
                "\"M_SELECTED\" INTEGER NOT NULL );"); // 8: mSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlbumInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(2, albumName);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(4, albumId);
        }
        stmt.bindLong(5, entity.getSongCount());
 
        String firstChar = entity.getFirstChar();
        if (firstChar != null) {
            stmt.bindString(6, firstChar);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(7, songName);
        }
        stmt.bindLong(8, entity.getYear());
        stmt.bindLong(9, entity.getMSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlbumInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(2, albumName);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(4, albumId);
        }
        stmt.bindLong(5, entity.getSongCount());
 
        String firstChar = entity.getFirstChar();
        if (firstChar != null) {
            stmt.bindString(6, firstChar);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(7, songName);
        }
        stmt.bindLong(8, entity.getYear());
        stmt.bindLong(9, entity.getMSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlbumInfo readEntity(Cursor cursor, int offset) {
        AlbumInfo entity = new AlbumInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // albumName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artist
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // albumId
            cursor.getInt(offset + 4), // songCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstChar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // songName
            cursor.getInt(offset + 7), // year
            cursor.getShort(offset + 8) != 0 // mSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlbumInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlbumName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArtist(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbumId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSongCount(cursor.getInt(offset + 4));
        entity.setFirstChar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSongName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYear(cursor.getInt(offset + 7));
        entity.setMSelected(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlbumInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlbumInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlbumInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
